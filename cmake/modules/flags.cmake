#
# Copyright (c) 2024 Maxime Pinard
#
# Distributed under the MIT license
# See accompanying file LICENSE or copy at
# https://opensource.org/licenses/MIT
#
cmake_minimum_required(VERSION 3.25)

include_guard()

# Dependencies
include(${CMAKE_CURRENT_LIST_DIR}/custom/custom_tools.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/custom/custom_flags.cmake)

function(setup_asan_flags)
    message(CHECK_START "Setup CXX Asan flags")
    list(APPEND CMAKE_MESSAGE_INDENT "  ")

    # https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
        message(STATUS "C++ compiler is MSVC-like Clang, using MSVC flags")
        custom_mscv_cxx_asan_flags_init()
        set(ASAN_FLAGS ${CUSTOM_MSVC_CXX_ASAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(STATUS "C++ compiler is Microsoft Visual Studio, using MSVC flags")
        custom_mscv_cxx_asan_flags_init()
        set(ASAN_FLAGS ${CUSTOM_MSVC_CXX_ASAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        message(STATUS "C++ compiler is LLVM Clang, using clang flags")
        custom_clang_cxx_asan_flags_init()
        set(ASAN_FLAGS ${CUSTOM_CLANG_CXX_ASAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
        message(STATUS "C++ compiler is Apple Clang, using clang flags")
        custom_clang_cxx_asan_flags_init()
        set(ASAN_FLAGS ${CUSTOM_CLANG_CXX_ASAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        message(STATUS "C++ compiler is GNU Compiler Collection, using gcc flags")
        custom_gcc_cxx_asan_flags_init()
        set(ASAN_FLAGS ${CUSTOM_GCC_CXX_ASAN_FLAGS})
    else()
        message(STATUS "Unknown compiler ID: ${CMAKE_CXX_COMPILER_ID}")
    endif()

    set(ASAN_CHECKED_FLAGS)
    foreach(flag ${ASAN_FLAGS})
        custom_check_compiler_linker_flag(${flag} res)
        if(res)
            set(ASAN_CHECKED_FLAGS "${ASAN_CHECKED_FLAGS} ${flag}")
            message(STATUS "[✔] ${flag}")
        else()
            message(STATUS "[✘] ${flag}")
        endif()
    endforeach()
    custom_build_type_init_base_flags_from(ASAN DEBUG)
    custom_build_type_add_base_flags(ASAN ${ASAN_CHECKED_FLAGS})

    list(POP_BACK CMAKE_MESSAGE_INDENT)
    message(CHECK_PASS "done")
endfunction()

function(setup_ubsan_flags)
    message(CHECK_START "Setup CXX UBsan flags")
    list(APPEND CMAKE_MESSAGE_INDENT "  ")

    # https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
        message(STATUS "C++ compiler is MSVC-like Clang, using MSVC flags")
        custom_mscv_cxx_ubsan_flags_init()
        set(UBSAN_FLAGS ${CUSTOM_MSVC_CXX_UBSAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(STATUS "C++ compiler is Microsoft Visual Studio, using MSVC flags")
        custom_mscv_cxx_ubsan_flags_init()
        set(UBSAN_FLAGS ${CUSTOM_MSVC_CXX_UBSAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        message(STATUS "C++ compiler is LLVM Clang, using clang flags")
        custom_clang_cxx_ubsan_flags_init()
        set(UBSAN_FLAGS ${CUSTOM_CLANG_CXX_UBSAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
        message(STATUS "C++ compiler is Apple Clang, using clang flags")
        custom_clang_cxx_ubsan_flags_init()
        set(UBSAN_FLAGS ${CUSTOM_CLANG_CXX_UBSAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        message(STATUS "C++ compiler is GNU Compiler Collection, using gcc flags")
        custom_gcc_cxx_ubsan_flags_init()
        set(UBSAN_FLAGS ${CUSTOM_GCC_CXX_UBSAN_FLAGS})
    else()
        message(STATUS "Unknown compiler ID: ${CMAKE_CXX_COMPILER_ID}")
    endif()

    set(UBSAN_CHECKED_FLAGS)
    foreach(flag ${UBSAN_FLAGS})
        custom_check_compiler_linker_flag(${flag} res)
        if(res)
            set(UBSAN_CHECKED_FLAGS "${UBSAN_CHECKED_FLAGS} ${flag}")
            message(STATUS "[✔] ${flag}")
        else()
            message(STATUS "[✘] ${flag}")
        endif()
    endforeach()
    custom_build_type_init_base_flags_from(UBSAN DEBUG)
    custom_build_type_add_base_flags(UBSAN ${UBSAN_CHECKED_FLAGS})

    list(POP_BACK CMAKE_MESSAGE_INDENT)
    message(CHECK_PASS "done")
endfunction()

function(setup_tsan_flags)
    message(CHECK_START "Setup CXX Tsan flags")
    list(APPEND CMAKE_MESSAGE_INDENT "  ")

    # https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
        message(STATUS "C++ compiler is MSVC-like Clang, using MSVC flags")
        custom_mscv_cxx_tsan_flags_init()
        set(TSAN_FLAGS ${CUSTOM_MSVC_CXX_TSAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(STATUS "C++ compiler is Microsoft Visual Studio, using MSVC flags")
        custom_mscv_cxx_tsan_flags_init()
        set(TSAN_FLAGS ${CUSTOM_MSVC_CXX_TSAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        message(STATUS "C++ compiler is LLVM Clang, using clang flags")
        custom_clang_cxx_tsan_flags_init()
        set(TSAN_FLAGS ${CUSTOM_CLANG_CXX_TSAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
        message(STATUS "C++ compiler is Apple Clang, using clang flags")
        custom_clang_cxx_tsan_flags_init()
        set(TSAN_FLAGS ${CUSTOM_CLANG_CXX_TSAN_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        message(STATUS "C++ compiler is GNU Compiler Collection, using gcc flags")
        custom_gcc_cxx_tsan_flags_init()
        set(TSAN_FLAGS ${CUSTOM_GCC_CXX_TSAN_FLAGS})
    else()
        message(STATUS "Unknown compiler ID: ${CMAKE_CXX_COMPILER_ID}")
    endif()

    set(TSAN_CHECKED_FLAGS)
    foreach(flag ${TSAN_FLAGS})
        custom_check_compiler_linker_flag(${flag} res)
        if(res)
            set(TSAN_CHECKED_FLAGS "${TSAN_CHECKED_FLAGS} ${flag}")
            message(STATUS "[✔] ${flag}")
        else()
            message(STATUS "[✘] ${flag}")
        endif()
    endforeach()
    custom_build_type_init_base_flags_from(TSAN DEBUG)
    custom_build_type_add_base_flags(TSAN ${TSAN_CHECKED_FLAGS})

    list(POP_BACK CMAKE_MESSAGE_INDENT)
    message(CHECK_PASS "done")
endfunction()

function(setup_sanitize_flags)
    message(CHECK_START "Setup CXX Sanitize flags")
    list(APPEND CMAKE_MESSAGE_INDENT "  ")

    # https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
        message(STATUS "C++ compiler is MSVC-like Clang, using MSVC flags")
        custom_mscv_cxx_asan_flags_init()
        custom_mscv_cxx_ubsan_flags_init()
        set(SANITIZE_FLAGS "${CUSTOM_MSVC_CXX_ASAN_FLAGS} ${CUSTOM_MSVC_CXX_UBSAN_FLAGS}")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(STATUS "C++ compiler is Microsoft Visual Studio, using MSVC flags")
        custom_mscv_cxx_asan_flags_init()
        custom_mscv_cxx_ubsan_flags_init()
        set(SANITIZE_FLAGS "${CUSTOM_MSVC_CXX_ASAN_FLAGS} ${CUSTOM_MSVC_CXX_UBSAN_FLAGS}")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        message(STATUS "C++ compiler is LLVM Clang, using clang flags")
        custom_clang_cxx_asan_flags_init()
        custom_clang_cxx_ubsan_flags_init()
        set(SANITIZE_FLAGS "${CUSTOM_CLANG_CXX_ASAN_FLAGS} ${CUSTOM_CLANG_CXX_UBSAN_FLAGS}")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
        message(STATUS "C++ compiler is Apple Clang, using clang flags")
        custom_clang_cxx_asan_flags_init()
        custom_clang_cxx_ubsan_flags_init()
        set(SANITIZE_FLAGS "${CUSTOM_CLANG_CXX_ASAN_FLAGS} ${CUSTOM_CLANG_CXX_UBSAN_FLAGS}")
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        message(STATUS "C++ compiler is GNU Compiler Collection, using gcc flags")
        custom_gcc_cxx_asan_flags_init()
        custom_gcc_cxx_ubsan_flags_init()
        set(SANITIZE_FLAGS "${CUSTOM_GCC_CXX_ASAN_FLAGS} ${CUSTOM_GCC_CXX_UBSAN_FLAGS}")
    else()
        message(STATUS "Unknown compiler ID: ${CMAKE_CXX_COMPILER_ID}")
    endif()

    set(SANITIZE_CHECKED_FLAGS)
    foreach(flag ${SANITIZE_FLAGS})
        custom_check_compiler_linker_flag(${flag} res)
        if(res)
            set(SANITIZE_CHECKED_FLAGS "${SANITIZE_CHECKED_FLAGS} ${flag}")
            message(STATUS "[✔] ${flag}")
        else()
            message(STATUS "[✘] ${flag}")
        endif()
    endforeach()
    custom_build_type_init_base_flags_from(SANITIZE DEBUG)
    custom_build_type_add_base_flags(SANITIZE ${SANITIZE_CHECKED_FLAGS})

    list(POP_BACK CMAKE_MESSAGE_INDENT)
    message(CHECK_PASS "done")
endfunction()

function(target_add_cxx_warning_flags target)
    message(CHECK_START "Adding CXX warning flags to ${target} target")
    list(APPEND CMAKE_MESSAGE_INDENT "  ")

    # https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html
    if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
        message(STATUS "C++ compiler is MSVC-like Clang, using MSVC flags")
        custom_mscv_cxx_warning_flags_init()
        set(WARNING_FLAGS ${CUSTOM_MSVC_CXX_WARNING_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(STATUS "C++ compiler is Microsoft Visual Studio, using MSVC flags")
        custom_mscv_cxx_warning_flags_init()
        set(WARNING_FLAGS ${CUSTOM_MSVC_CXX_WARNING_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        message(STATUS "C++ compiler is LLVM Clang, using clang flags")
        custom_clang_cxx_warning_flags_init()
        set(WARNING_FLAGS ${CUSTOM_CLANG_CXX_WARNING_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
        message(STATUS "C++ compiler is Apple Clang, using clang flags")
        custom_clang_cxx_warning_flags_init()
        set(WARNING_FLAGS ${CUSTOM_CLANG_CXX_WARNING_FLAGS})
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        message(STATUS "C++ compiler is GNU Compiler Collection, using gcc flags")
        custom_gcc_cxx_warning_flags_init()
        set(WARNING_FLAGS ${CUSTOM_GCC_CXX_WARNING_FLAGS})
    else()
        message(STATUS "Unknown compiler ID: ${CMAKE_CXX_COMPILER_ID}")
    endif()

    foreach(flag ${WARNING_FLAGS})
        custom_check_cxx_compiler_flag(${flag} res)
        if(res)
            target_compile_options(${target} PRIVATE "$<$<COMPILE_LANGUAGE:CXX>:${flag}>")
            message(STATUS "[✔] ${flag}")
        else()
            message(STATUS "[✘] ${flag}")
        endif()
    endforeach()

    list(POP_BACK CMAKE_MESSAGE_INDENT)
    message(CHECK_PASS "done")
endfunction()
